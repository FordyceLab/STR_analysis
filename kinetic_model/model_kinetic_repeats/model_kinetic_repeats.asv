% This script analyses kinetic measurement data of motif and repeats DNA
% binding Max and Pho4 from Connor

addpath(genpath('Functions'));


%% Hej
seqPath='../data/library1.csv';
dataPath='../data/library1_Kd_koff.csv';
concensusMotif='GTCACGTGAC';


%Load data
seqAndNames=importdata(seqPath);
numInSeq=numel(seqAndNames);
for i=1:numInSeq
    seqAndNames{i}=strsplit(seqAndNames{i},',');
end

data=importdata(dataPath,',');
%% Set parameters
startIndexes=1:3;
flank1Indexes=4:16;
motifBaseIndexes=17:26;
flank2Indexes=27:39;
endIndexes=40:54;

numRegions=2; %core and flanks, two states

setNoMotifZero=1;%If binding probabilies for no motif is to be fixed at 0
setRandFlankZero=1;%If binding probabilies for random flanks is to be fixed at 0
lockFlankControls=0;%Since flanks + no motif are not identical to the sequences with motif, lock the flank control sequences to the same parameter as for the most simlar flank+motif

%Get the sequence and name of each sequence, with the same indexing
numInData=size(data.data,1);
sequences=cell(1,numInData);
newNames=cell(1,numInData);
motifNames=cell(1,numInData);
flankNames=cell(1,numInData);

for i=1:numInSeq
    for j=1:numInData
        if strcmp(data.textdata{j+1,2},seqAndNames{i}{2})
            sequences{j}=seqAndNames{i}{3};
            newNames{j}=seqAndNames{i}{2};
            thestr=strsplit(newNames{j},' + ');
            motifNames{j}=thestr{1};
            flankNames{j}=thestr{2};
            break;
        end
    end
end
koffDataMaxAll=data.data(:,1:4:12);
KDDataMaxAll=data.data(:,3:4:12); % I think units are nM
koffDataPho4All=data.data(:,13:4:end);
KDDataPho4All=data.data(:,15:4:end);
sequencesOrig=sequences;

%Chance the flank only sequences so they mathces the cloesest mathces for a
%sequence that has the motif, done manually
if lockFlankControls
    sequences{26}(flank1Indexes)=sequences{17}(flank1Indexes);
    sequences{26}(flank2Indexes)=sequences{17}(flank2Indexes);
    
    sequences{29}(flank1Indexes)=sequences{15}(flank1Indexes);
    sequences{29}(flank2Indexes)=sequences{15}(flank2Indexes);
    
end


%Check if each sequence has consencus motif, and if flanks are reverse
%complement of each other

flankRevCompl=zeros(1,numInData);
hasConcensusMotif=zeros(1,numInData);

for j=1:numInData
  %  if strcmp(sequences{j}(flank1Indexes),seqrcomplement(sequences{j}(flank2Indexes)))
  %      flankRevCompl(j)=1;
  %      
  %  end
    
    if strcmp(sequences{j}(motifBaseIndexes),concensusMotif)
        hasConcensusMotif(j)=1;
    end
end

% Create unique identified for each core and flanks

seqIdentifier=zeros(numInData,numRegions);
uniqueMotifs={};
uniqueFlank1={};
uniqueFlank2={};
motifHasBindProb=[];
flankHasBindProb=[];
regionsAdded=zeros(1,numRegions);
numMotifs=0;
numFlanks=0;
for i=1:numInData
    %Check for this core motif
    if (setNoMotifZero==1&&~strcmp(motifNames{i},'No motif'))||setNoMotifZero==0
        for j=1:regionsAdded(1)
            if strcmp(sequences{i}(motifBaseIndexes),uniqueMotifs{j})
                seqIdentifier(i,1)=j;
                break;
            end
        end
        if seqIdentifier(i,1)==0 %First time seing this sequence
            regionsAdded(1)=regionsAdded(1)+1;
            uniqueMotifs{regionsAdded(1)}=sequences{i}(motifBaseIndexes);
            seqIdentifier(i,1)=regionsAdded(1);
        end
    end
    %Check for this flanks
    if (setNoMotifZero==1&&~strcmp(flankNames{i}(1:6),'random'))||setRandFlankZero==0
        for j=1:regionsAdded(2)
            if strcmp(sequences{i}(flank1Indexes),uniqueFlank1{j})&&strcmp(sequences{i}(flank2Indexes),uniqueFlank2{j})
                seqIdentifier(i,2)=j;
                break;
            end
        end
        if seqIdentifier(i,2)==0 %First time seing this sequence
            regionsAdded(2)=regionsAdded(2)+1;
            uniqueFlank1{regionsAdded(2)}=sequences{i}(flank1Indexes);
            uniqueFlank2{regionsAdded(2)}=sequences{i}(flank2Indexes);
            seqIdentifier(i,2)=regionsAdded(2);
        end
    end
    
end
koffDataMaxSelected=koffDataMaxAll;
KDDataMaxSelected=KDDataMaxAll; % I think units are nM
koffDataPho4Selected=koffDataPho4All;
KDDataPho4Selected=KDDataPho4All;

%trainingDataset=1:numInData; %Maybe only train on motif and mutatted motifs and the flanks who exists for both, 2*2*7 datapoints, 1+2*2+2*7 variables


%% testing theoretical experssion of mean first passage times/ eigenvalues
%times=[0:0.005:200];
times=[0:0.005:200];
params=[1 10^6 0.05 10 0.1 0.4];% KD = koffSlope/konSlope but not equal
%koffMeanFirstPassage/konMeanFirstPassge
%params=[1 0.6*10^6 0.05 10 0.1/0.6 0];%KD = koffSlope/konSlope =koffMeanFirstPassage/konMeanFirstPassge
%params=[1 10^6 0.05 0.1 0.1 0.4];
%params=[1 10^6 0.05 100 0.05 0.9];
%params=[1 0.1*10^6 0.05 100 0.5 0];
solutionConc=1;
%getRatesCoreRepeat gets equllibrium KD and effeictice rates koff and kon,
%for the  4 state model described by params
%params = [konmax invTimeTestingstate koffmicro_core koffmicro_flank p_core p_flank]
% index 0: Free protein, Index 1: testing state, index 2:core index 3: flank
%The free / not bound protein state is not handled explicitly, but it is
%instead used that x(0)=1-x(1)-x(2)-x(3). There by the non-zero b vector for the assocation experiment,
%Using this implementation and notations give an invertible A matrix which
%is conventient
slopePoints=5;

bon = [params(1)*solutionConc;0;0];
boff = [0;0;0];

%bOff = [-params(1)*solutionConc;0;0];

%A=[-params(1)*solutionConc params(2)*(1-params(5)-params(6)) 0 0;params(1)*solutionConc -params(2) params(3) params(4);0 params(2)*params(5) -params(3) 0;0 params(2)*params(6) 0 -params(4)];
A=[-params(2) params(3) params(4);params(2)*params(5) -params(3) 0;params(2)*params(6) 0 -params(4)];
Aoff=A;
%dx(1)/dt should also have a term params(1)*solutionConc*x(0), that not handled in the experssiomn above. Correct by adding and using x(0)=1-x(1)-(x2)-x(3) on the first row
A(1,:)= A(1,:)-params(1)*solutionConc;
Aon=A;

x0on=[0;0;0];
%Add an extra line saying all concentrations should sum to 1

x0off=Aon\(-bon);

funcValsOn=solveODEs(Aon,bon,x0on,times);
funcValsOff=solveODEs(Aoff,boff,x0off,times);

onCurve=sum(funcValsOn(2:3,:));

theSum=sum(x0off);

KD = solutionConc*(1-theSum)/theSum;


%survivalFuncOff=sum(funcValsOff)/theSum;
survivalFuncOff=sum(funcValsOff(2:3,:));
survivalFuncOff=survivalFuncOff/survivalFuncOff(1);
%Formula for expecation value using the cdf (1-survival function)
offTime=trapz(times,survivalFuncOff);
koffIntegral=1/offTime;

p=polyfit(times(1:slopePoints),survivalFuncOff(1:slopePoints),1);
koffSlope=-p(1);
p=polyfit(times(1:slopePoints),onCurve(1:slopePoints),1);
konSlope=p(1)/solutionConc;

%Try with mean first passagetimes

%tiem from dissocatied to core OR flank

onMeanFirstPassage=((1/(params(1)*solutionConc))+1/params(2))/(params(5)+params(6));

konMeanFirstPassage=1/(onMeanFirstPassage*solutionConc);

offMeanFirstPassageCore=((1-params(6))*(1/params(3))+params(6)*(1/params(4))+(1/params(2)))/(1-params(5)-params(6));

offMeanFirstPassageFlank=((1-params(5))*(1/params(4))+params(5)*(1/params(3))+(1/params(2)))/(1-params(5)-params(6));

offMeanFirstPassage=x0off(2)/(x0off(2)+x0off(3))*offMeanFirstPassageCore+x0off(3)/(x0off(2)+x0off(3))*offMeanFirstPassageFlank;
offMeanFirstPassageInitial=params(5)/(params(5)+params(6))*offMeanFirstPassageCore+params(6)/(params(5)+params(6))*offMeanFirstPassageFlank;

koffMeanFirstPassage=1/offMeanFirstPassage;

koffMeanFirstPassageInitial=1/offMeanFirstPassageInitial;

figure();
 thefit=fit(times',survivalFuncOff','exp1');
 plot(thefit,times,survivalFuncOff);
%%
koffData=nanmean(koffDataPho4Selected,2);
KDData=nanmean(KDDataPho4Selected,2);
%koffData=koffDataPho4Selected;
%KDData=KDDataPho4Selected;
weights=ones(numInData,1);
weights(sum(seqIdentifier,2)==0)=0; %Don't fit on the negative control seqences, that has no core or repat flank
weights(seqIdentifier(:,1)==0)=0; %Don't fit on flank only;
% p_core_rel p_flank_rel are used as parameters, where kon,micro,core =
% p_core_rel*koffmicro_flank
numCores=regionsAdded(1);
numFlanks=regionsAdded(2);
paramIndex=[3 3+numCores 3+numCores+numFlanks 3+numCores+numFlanks+numCores]; %index of the start of [koffmicro_core koffmicro_flank p_core_rel p_flank_rel] index 1: konMax, index2: koff,M
numParams=1+1+2*regionsAdded(1)+2*regionsAdded(2);
numGuesses=10;

[params,residual]=fitCoreRepeatModelKDmicro(koffData,KDData,weights,seqIdentifier,regionsAdded,paramIndex,numGuesses);

[KDModel,koffModel] = getManyCoreRepeatModelKDmicro(params,seqIdentifier,paramIndex);
%[KDModel,koffModel] = getManyCoreRepeatModel(params,seqIdentifierTemp,paramIndex);

figure();
hold on;
title('Training data')
plot(KDModel(weights~=0),KDData(weights~=0,:),'b.');
xlabel('Model K_D (nM)');
ylabel('Experimental K_D (nM)');
%xL=xlim();
%yL=ylim();
%maxL=max([yL xL]);
%xlim([0 maxL]);
%ylim([0 maxL]);

figure()
hold on;
title('Training data')
plot(koffModel(weights~=0),koffData(weights~=0,:),'r.');
xlabel('Model koff (s^-^1)');
ylabel('Experimental koff (s^-^1)');
%xL=xlim();
%yL=ylim();
%maxL=max([yL xL]);
%xlim([0 maxL]);
%ylim([0 maxL]);

%%
figure